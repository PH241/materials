# =====================================================================================================================
# WRANGLING EXERCISES
# =====================================================================================================================

# Where applicable, try to use both reshape2 and tidyr to complete the exercises below.

# Exercise 1 ----------------------------------------------------------------------------------------------------------

# 1. Use the Quandl package to grab the following data: WIKI/AAPL, WIKI/GOOGL and WIKI/EBAY.

install.packages("Quandl")

library(Quandl)
library(dplyr)

Quandl.api_key("i_-QYjCHvpsHa9cMtwSy")

tickers = c("AAPL", "GOOGL", "EBAY")

stocks = lapply(tickers, function(ticker) {
  Quandl(sprintf("WIKI/%s", ticker))
})
  
  
# 2. Discard all columns except Date and "Adj. Close". You might need to use `Adj. Close` to index that column.

names(stocks) <- tickers

stocks <- lapply(stocks, function(stock) select(stock, Date, `Adj. Close`))


# 3. Rename the "Adj. Close" column using the ticker name.

stocks$AAPL <- rename(stocks$AAPL, AAPL = `Adj. Close`)
stocks$GOOGL <- rename(stocks$GOOGL, GOOGL = `Adj. Close`)
stocks$EBAY <- rename(stocks$EBAY, EBAY = `Adj. Close`)

# 4. Merge these data into a single data frame. Assign this to variable stocks. Make sure that **all** data are
#    included!

stocks = merge(merge(stocks$AAPL, stocks$GOOGL, all = TRUE), stocks$EBAY, all = TRUE)

# 5. Are these data tidy? Why?

library(tidyr)

stocks.tidy.1 = gather(stocks, ticker, close_price, -Date)

library(reshape2)

stocks.tidy.2 = melt(stocks, id.vars = "Date", variable.name = "ticker", value.name = "close_price")

# ggplot(data = stocks, aes(x = Date , y = AAPL)) + geom_point()

ggplot(data = stocks.tidy.1, aes(x = Date , y = close_price, color = ticker)) + geom_point(shape = ".") + 
  x_axis_continous() + theme_bw()

# Exercise 2 ----------------------------------------------------------------------------------------------------------

# 1. Think about how you would calculate the average adjusted closing price of each stock broken down by year and month
#    with the data in the current format.
# 2. Think about how the data might be transformed to make this easier.

# Exercise 3 ----------------------------------------------------------------------------------------------------------

# 1. Convert stocks into a long (and tidy) format. Choose suitable column names.
# 2. Calculate the monthly average adjusted closing price of each stock broken down by year and month.

# Exercise 4 ----------------------------------------------------------------------------------------------------------

# 1. Calculate the annual maximum monthly average adjusted closing price of each stock. For clarity, this is the
#    maximum value achieved for each monthly average calculated above, broken down by year.
# 2. Great a faceted plot showing the average adjusted closing price of each stock versus year.

# Exercise 5 ----------------------------------------------------------------------------------------------------------

# 1. Convert the annual maximum monthly average adjusted closing price data into wide format. Retain only years from
#    2005 and later. The data should look something like this:
#
#      Ticker     2005    2006    2007    2008    2009    2010    2011    2012    2013    2014    2015    2016
#    1   AAPL   9.6005  11.371  25.052  24.296  26.342  42.276  52.236  90.010  76.120 110.051 126.076 106.088
#    2  GOOGL 209.4760 242.816 347.699 305.905 299.645 301.005 313.669 363.028 542.175 595.088 771.040 756.592
#    3   EBAY  48.6430  44.886  38.004  31.485  24.021  30.342  33.281  51.333  55.794  57.261  61.134  25.741